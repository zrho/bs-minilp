// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var MinilpWasm = require("@zrho/minilp-wasm");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function directionToString(direction) {
  if (direction >= 772858092) {
    return "maximize";
  } else {
    return "minimize";
  }
}

function comparisonToString(comparison) {
  if (comparison !== 15934) {
    if (comparison >= 17049) {
      return "le";
    } else {
      return "eq";
    }
  } else {
    return "ge";
  }
}

function makeVariable(minimum, maximum, coefficient) {
  return {
          coefficient: coefficient,
          minimum: minimum,
          maximum: maximum
        };
}

function makeConstraint(expression, comparison, constant) {
  var expression$1 = $$Array.map((function (param) {
          return {
                  variable: param[0],
                  coefficient: param[1]
                };
        }), expression);
  var comparison$1 = comparisonToString(comparison);
  return {
          expression: expression$1,
          comparison: comparison$1,
          constant: constant
        };
}

var BadFormat = Caml_exceptions.create("Minilp.BadFormat");

var Infeasible = Caml_exceptions.create("Minilp.Infeasible");

var Unbounded = Caml_exceptions.create("Minilp.Unbounded");

function solve(direction, variables, constraints) {
  var direction$1 = directionToString(direction);
  var result = MinilpWasm.solve({
        direction: direction$1,
        variables: variables,
        constraints: constraints
      });
  if (result.type === "success") {
    return /* tuple */[
            result.solution.objective,
            result.solution.values
          ];
  } else {
    if (result.error === "bad_format") {
      throw BadFormat;
    }
    if (result.error === "infeasible") {
      throw Infeasible;
    }
    if (result.error === "unbounded") {
      throw Unbounded;
    }
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "minilp.re",
            76,
            9
          ]
        ];
  }
}

exports.Infeasible = Infeasible;
exports.Unbounded = Unbounded;
exports.makeVariable = makeVariable;
exports.makeConstraint = makeConstraint;
exports.solve = solve;
/* @zrho/minilp-wasm Not a pure module */
